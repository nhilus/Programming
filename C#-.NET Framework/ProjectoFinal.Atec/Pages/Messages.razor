@page "/messages"

@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.EntityFrameworkCore
@using ProjetoFinal.Migrations
@using ProjetoFinal.Models.Message
@using ProjetoFinal.Models.Provider
@using ProjetoFinal.Web.Blazor.Data
@using ProjetoFinal.Web.Blazor.Hubs
@using System.Security.Claims

@attribute [Authorize]

@inject IAuthorizationService AuthorizationService
@inject IDbContextFactory<PfaDbContext> DbFactory
@inject NavigationManager navigationManager
@inject HttpUtilities httpUtilities

<div class="container-fluid py-4" style="max-width: 1200px">
    <div class="row">
        <!-- Conversations list -->
        <div class="col-lg-4 col-md-5 col-12">
            <div class="card blur shadow-blur max-height-vh-70 overflow-auto overflow-x-hidden mb-5 mb-lg-0">
                <div class="card-header">
                    <h6>Conversations</h6>
                </div>
                <div class="card-body p-2">
                    @foreach (Conversation conversation in conversations)
                    {
                        <div class="d-block p-2" onclick="@(async () => await SelectConversationAsync(conversation.Id))">
                            <div class="d-flex p-3" style="border: solid 1px lightgray; cursor: pointer; border-radius: 10px;">
                                <div style="width: 100%; overflow: hidden;">
                                    <div class="justify-content-between align-items-center" style="overflow: hidden; width: max-content;">
                                        <h6 class="mb-0" style="height: 25px; overflow:">@GetName(conversation)</h6>
                                        @if (conversation.Messages.Count != 0)
                                        {
                                            <p class="text-muted text-xs my-2" style="height: 25px; overflow: hidden; text-overflow: ellipsis;">@conversation.Messages.LastOrDefault().Content</p>
                                            <p class="text-muted text-xs mb-0">@conversation.Messages.LastOrDefault().TimeStamp</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- End of conversations list -->
        <!-- Chat -->
        <div class="col-lg-8 col-md-7 col-12">
            @if (selectedConversationId != null)
            {
                Conversation selectedConversation = conversations.Find(x => x.Id == selectedConversationId);

                <div class="card blur shadow-blur max-height-vh-70">
                    <!-- Header -->
                    <div class="card-header">
                        <h6 class="mb-0 d-block" style="@((!isProvider) ? "cursor: pointer;" : null)"
                           @onclick="() => GoToProfile(selectedConversation)"
                        >
                            @GetName(selectedConversation)
                        </h6>
                    </div>
                    <!-- Messages -->
                    <div class="card-body overflow-auto overflow-x-hidden">
                        @foreach (Message message in selectedConversation.Messages.OrderBy(x => x.TimeStamp))
                        {
                            <div class="row @GetMessageSideClass(message.UserId).Result mb-4">
                                <div class="col-auto">
                                    <div class="card ">
                                        <div class="card-body py-2 px-3">
                                            <p class="mb-1">@message.Content</p>
                                            <div class="d-flex align-items-center text-sm opacity-6">
                                                <i class="ni ni-check-bold text-sm me-1"></i>
                                                <small>@message.TimeStamp</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Message input -->
                    <div class="card-footer d-block">
                        <div class="d-flex">
                            <div class="input-group">
                                <input @bind-value="@_newMessage" class="form-control" placeholder="Type here" />
                            </div>
                            <button @onclick="@(() => SendAsync(_newMessage))" class="btn bg-gradient-primary mb-0 ms-2">
                                <i class="fa-solid fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- End of chat -->
    </div>
    @if(IsVisibleError)
    {
        <ProjetoFinal.Web.Blazor.Shared.Components.ErrorPopup errorList="errorList" @bind-IsVisible="@IsVisibleError" @bind-IsVisible:event="IsVisibleChanged" />
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private PfaDbContext dbContext = default!;
    List<Conversation>? conversations = new();
    List<MessagingUserData>? messagingUserData = new();
    private Guid? selectedConversationId;
    private HttpClient mainHttpClient = null!;
    private string _newMessage;
    private HubConnection _hubConnection;
    private bool isProvider { get; set; }
    private IQueryable<Profile> profiles = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Create HttpClient.
            mainHttpClient = httpUtilities.CreateUserClient("Main");

            // Initialise context
            dbContext = await DbFactory.CreateDbContextAsync();
            profiles = dbContext.Profiles.AsNoTracking();

            // Check if client or provider
            isProvider = (await AuthorizationService.AuthorizeAsync((await authenticationStateTask).User, "isProvider")).Succeeded;

            conversations = await mainHttpClient.GetFromJsonAsync<List<Conversation>>("/users/messaging/conversations");

            foreach (Conversation conversation in conversations)
            {
                string otherUserId = await GetOtherUserIdFromCoversation(conversation);
                string otherUserName = await FetchUserName(otherUserId);

                messagingUserData.Add(
                    new MessagingUserData(
                        otherUserId,
                        otherUserName,
                        conversation.Id
                    )
                );
            }

            foreach (Conversation conversation in conversations)
            {
                conversation.Messages = await mainHttpClient.GetFromJsonAsync<List<Message>>($"messaging/conversations/{conversation.Id}/messages");
                conversation.Messages.OrderBy(x => x.TimeStamp).ToList();
            }

            conversations.OrderByDescending(x => x.Messages.LastOrDefault().TimeStamp);
        }
        catch{
            addErrorToList("Error ao carregar. Atualize a página");
            ToggleVisibilityError();
            return;
        }

        try
        {
            // Create the chat client
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.BaseUri.TrimEnd('/') + ChatHub.HubUrl)
                .Build();

            _hubConnection.On<Message>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    /// <summary>
    /// Selects the current conversation.
    /// </summary>
    /// <param name="conversationId">The Conversation ID.</param>
    private async Task SelectConversationAsync(Guid conversationId)
    {
        selectedConversationId = conversationId;
        StateHasChanged();
    }

    private void BroadcastMessage(Message message)
    {
        Conversation conversation = conversations.Find(x => x.Id == message.ConversationId);

        // If null, the user is not in the conversation, therefore, do nothing.
        if(conversation == null)
            return;

        conversation.Messages.Add(message);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if (message == null)
            return;

        // Send message and get the response.
        HttpResponseMessage response = await mainHttpClient.PostAsync($"messaging/conversations/{selectedConversationId}/messages?text={message}", null);
        if ((int)response.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
            return;
        }
        else if ((int)response.StatusCode > 401)
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde");
            ToggleVisibilityError();
            return;
        }

        // Get message that was sent from the request response.
        Message messageSent = await response.Content.ReadFromJsonAsync<Message>();

        // Reset input.
        _newMessage = string.Empty;

        await _hubConnection.SendAsync("Broadcast", messageSent);
    }

    private async Task<string> GetOtherUserIdFromCoversation(Conversation c)
    {
        List<Participant> conversationParticipants = await GetParticipantsFromConversation(c);
        string loggedUserId = await GetLoggedUserId();
        return (conversationParticipants.Find(x => x.UserId != loggedUserId)).UserId;
    }

    private async Task<string> GetLoggedUserId(){
        return (await authenticationStateTask).User.FindFirstValue("sub");
    }

    private async Task<List<Participant>> GetParticipantsFromConversation(Conversation c)
    {
        return await mainHttpClient.GetFromJsonAsync<List<Participant>>($"/messaging/conversations/{c.Id}/participants");
    }

    private async Task<string> FetchUserName(string userId)
    {
        if(isProvider) return await mainHttpClient.GetFromJsonAsync<string>($"/users/{userId}/name");
        return profiles.First(x => x.UserId == userId).Name;
    }

    private string GetName(Conversation c)
    {
        return messagingUserData.Find(x => x.ConversationId == c.Id).UserName;
    }

    private async Task GoToProfile(Conversation selectedConversation)
    {
        string otherUserId = await GetOtherUserIdFromCoversation(selectedConversation);
        navigationManager.NavigateTo($"/profilepage/{otherUserId}");
    }

    /// <summary>
    /// Gets the CSS class for the message side. If it's the user's own message, display 'justify-content-end'.
    /// </summary>
    /// <param name="messageUserId">The User ID of the message sender.</param>
    /// <returns>'justify-content-end' if it's the user own message, else, 'justify-content-start'.</returns>
    private async Task<string> GetMessageSideClass(string messageUserId) => messageUserId == (await authenticationStateTask).User.FindFirstValue("sub") ? "justify-content-end" : "justify-content-start";

    //Error popup modal control
    private List<string> errorList = new();
    public bool IsVisibleError { get; set; } = false;
    private void ToggleVisibilityError()
    {
        IsVisibleError = !IsVisibleError;
        if (!IsVisibleError) errorList = new();
    }
    private void addErrorToList(string errorMessage)
    {
        errorList.Add(errorMessage);
    }
}