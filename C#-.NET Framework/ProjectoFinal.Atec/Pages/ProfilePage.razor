@page "/profilepage/{userId}";

@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpUtilities httpUtilities

@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor

@using ProjetoFinal.Migrations
@using ProjetoFinal.Models.Config
@using ProjetoFinal.Models.Postal
@using ProjetoFinal.Models.Provider
@using ProjetoFinal.Models.Service
@using ProjetoFinal.Web.Blazor.Shared.Components.MainContainer
@using ProjetoFinal.Web.Blazor.Shared.Components.ProfilePage
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@inject IDbContextFactory<PfaDbContext> DbFactory
@using Microsoft.EntityFrameworkCore



<CascadingAuthenticationState>
    <AuthorizeView>
        @{
            @if (profile is null)
            {

            }
            else
            {
                <div class="profile-container" id="parent">
                    <div class="bannerDiv" id="div1">
                        <ProjetoFinal.Web.Blazor.Shared.Components.ProfileBanner />
                        @if (UserId == loggedUserId && !hasReviews)
                        {
                            <div class="socials" id="div4">
                                <button @onclick="ToggleEditVisibility">
                                    <i class="fa fa-user-edit fa-2xl"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="main-ct" id="div3">
                        <MainContainer>
                            <div class="name-container" style="padding-top: 30px">
                                <h3>@profile.Name</h3>
                                @if (ratings.Count == 0)
                                {
                                    <h5>
                                        Ainda não possuí avaliações
                                    </h5>
                                }
                                else
                                {
                                    <h5>
                                        @Math.Round(ratings.Average(x => x.Rate), 1) <MudRating ReadOnly="true" SelectedValue="@((int) Math.Round( (double)(ratings.Average(x => x.Rate)) , 0))" MaxValue="5" Size="Size.Medium" />
                                    </h5>
                                }
                            </div>
                            <div id="profile-tabs" class="col-lg-12 control-section">
                                <SfTab LoadOn="ContentLoad.Dynamic" @bind-SelectedItem="@SelectedTab">
                                    <TabItems>
                                        <TabItem>
                                            <HeaderTemplate>Perfil</HeaderTemplate>
                                            <ContentTemplate>
                                                <div id="description">
                                                    <h2>Descrição</h2>
                                                    <h5> @profile.Content</h5>
                                                </div>
                                                <div id="categories">
                                                    <h2>Categorias</h2>
                                                    <div class="category-sub">
                                                        @foreach (Category category in profile.Categories)
                                                        {
                                                            <ServicesChosen @bind-image="category.Url" @bind-name="category.Name" />
                                                        }
                                                    </div>
                                                </div>
                                                <div id="location">
                                                    <h2>Localizações</h2>
                                                    <div id="location-sub" style="width:100%;display:grid;gap:30px 0;grid-template-columns: 1fr 1fr">
                                                        @foreach (County county in profile.Counties)
                                                        {
                                                            <div id="loc-elem">
                                                                <i class="fa fa-map-marker-alt fa-2xl" style="margin-bottom: 10px"></i>
                                                                <p style="text-align:center;">@county.Name , @county.District.Name </p>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </ContentTemplate>
                                        </TabItem>
                                        <TabItem>
                                            <HeaderTemplate>Portfólio</HeaderTemplate>
                                            <ContentTemplate>
                                                @if (ImageSources.Count > 0)
                                                {
                                                    <ProfileCarousel _userId="@UserId" imageSources="@ImageSources" />

                                                }
                                                else
                                                {
                                                    <h5> Ainda não fez upload de imagens </h5>
                                                }
                                                @if (UserId == loggedUserId)
                                                {
                                                    <SfUploader ID="UploadFiles">
                                                        <UploaderEvents OnFailure="@OnFailureHandler"></UploaderEvents>
                                                        <UploaderAsyncSettings SaveUrl="@SfUploadAddUrl" RemoveUrl="@SfUploadRemoveUrl" />
                                                        <UploaderButtons Browse="Pesquisar" />
                                                    </SfUploader>
                                                }
                                            </ContentTemplate>
                                        </TabItem>
                                        <TabItem>
                                            <HeaderTemplate>Reviews</HeaderTemplate>
                                            <ContentTemplate>
                                                @if (ratings.Count == 0)
                                                {
                                                    <h5> Ainda não possui classificações </h5>
                                                }
                                                else
                                                {
                                                    @foreach (Rating rating in ratings)
                                                    {
                                                        <ReviewCard @bind-Valor="@rating.Rate"
                                                        @bind-Comentario="rating.Description" />
                                                    }
                                                }
                                            </ContentTemplate>
                                        </TabItem>
                                        <TabItem>
                                            <HeaderTemplate>Links</HeaderTemplate>
                                            <ContentTemplate>
                                                <div class="socials" id="div2">
                                                    <ul class="socials-ul">
                                                        @if (profile.ProfileSocials.Count == 0)
                                                        {
                                                            <h5>Ainda não introduziu links sociais</h5>
                                                        }
                                                        else
                                                        {
                                                            @foreach (ProfileSocial profileSocial in profile.ProfileSocials)
                                                            {
                                                                <li>
                                                                    <i class="fa-brands fa-@(profileSocial.SocialNetwork.Name.ToLower()) fa-2xl" style="margin:12px;" />
                                                                    <p>@profileSocial.Url.Split('/').Last()</p>
                                                                </li>
                                                            }
                                                        }
                                                    </ul>
                                                </div>
                                            </ContentTemplate>
                                        </TabItem>
                                    </TabItems>
                                </SfTab>
                            </div>
                        </MainContainer>
                    </div>
                </div>
            }

            @if (IsVisible)
            {
                <ProfileEditPopUp @bind-IsVisible="IsVisible" @bind-IsVisible:event="IsVisibleChanged" UserId="@UserId" Profile="@profile"></ProfileEditPopUp>
            }

        }
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private Boolean DisableTab { get; set; } = true;
    private Boolean Disabled { get; set; } = false;
    private int SelectedTab { get; set; } = 0;
    private string _userId;
    private HttpClient mainHttpClient;
    private string loggedUserId { get; set; }
    private bool hasReviews { get; set; } = true;


    [Parameter]
    public string UserId { get; set; }


    private bool _isVisible;


    protected override async Task OnParametersSetAsync()
    {
        await GetPrincipalData();
        await base.OnParametersSetAsync();
    }

    private async Task GetPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _userId = user.FindFirst(c => c.Type == "sub")?.Value;
        }
    }

    [Parameter]
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (_isVisible == value) return;
            _isVisible = value;
            if (!value) getReviewStatus();
            IsVisibleChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private void ToggleEditVisibility()
    {
        IsVisible = !IsVisible;
    }

    private Profile profile = default!;
    private List<Rating> ratings = default!;
    private string review = default!;
    private string[] profilePictures = default!;


    private List<string> ImageSources = new List<string>();
    public string ProfilePicDataUrl { get; set; }
    public string SfUploadAddUrl = default!;
    public string SfUploadRemoveUrl = default!;

    private PfaDbContext dbContext = default!;
    private IQueryable<ProfileReview> profileReviews = default!;

    private void OnFailureHandler(Syncfusion.Blazor.Inputs.FailureEventArgs args)
    {
        //
    }

    protected override async Task OnInitializedAsync()
    {
        dbContext = await DbFactory.CreateDbContextAsync();
        profileReviews = dbContext.ProfileReview.AsNoTracking();

        _userId = UserId;
        loggedUserId = (await authenticationStateTask).User.FindFirstValue("sub");
        if (UserId == loggedUserId)
        {
            await getReviewStatus();
        }

        mainHttpClient = httpUtilities.CreateUserClient("Main");
        GetPrincipalData();
        profile = await mainHttpClient.GetFromJsonAsync<Profile>($"/providers/profiles/{UserId}");
        profile.ProfileSocials = await mainHttpClient.GetFromJsonAsync<List<ProfileSocial>>($"/providers/profiles/{UserId}/socialnetworks");
        profile.Categories = await mainHttpClient.GetFromJsonAsync<List<Category>>($"/providers/profiles/{UserId}/categories");
        profile.Counties = await mainHttpClient.GetFromJsonAsync<List<County>>($"/providers/profiles/{UserId}/counties");
        profilePictures = await mainHttpClient.GetFromJsonAsync<string[]>($"/providers/profiles/{UserId}/pictures");
        ratings = await mainHttpClient.GetFromJsonAsync<List<Rating>>($"/providers/profiles/{UserId}/ratings");

        SfUploadAddUrl = $"api/profiles/{UserId}/pictures/Save";
        SfUploadRemoveUrl = $"api/profiles/{UserId}/pictures/Remove";

        foreach (ProfileSocial profileSocial in profile.ProfileSocials)
        {
            profileSocial.SocialNetwork = await mainHttpClient.GetFromJsonAsync<SocialNetwork>($"/socialnetworks/{profileSocial.SocialNetworkId}");
        }

        foreach (County county in profile.Counties)
        {
            county.District = await mainHttpClient.GetFromJsonAsync<District>($"/districts/{county.DistrictId}");
        }

        foreach (Rating rate in ratings)
        {
            rate.Publication = await mainHttpClient.GetFromJsonAsync<Publication>($"/publications/{rate.PublicationId}");
        }

        foreach (string picture in profilePictures)
        {
            ImageSources.Add(picture);
        }

        StateHasChanged();
    }

    private async Task getReviewStatus()
    {
        List<ProfileReview> userProfileReview = profileReviews.Where(x => x.ProfileId == UserId).ToList();
        if (userProfileReview.Find(x => x.IsClosed == false) == null) hasReviews = false;
    }
}


<style>


    .e-upload.e-control-wrapper, .e-bigger.e-small .e-upload.e-control-wrapper {
        margin-top: 50px;
    }

    .socials {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .socials li {
            display: flex;
            flex-direction: column;
            align-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 20px;
        }

    #profile-container {
        display: flex;
        flex-direction: column;
        margin-left: auto;
        margin-right: auto;
    }

        #profile-container .control-section {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
        }

        #profile-container .e-tab {
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
        }

            #profile-container .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
                color: black;
                border: 1px solid grey;
            }

            #profile-container .e-tab .e-tab-header .e-toolbar-item {
            }

        #profile-container .tabItems {
            display: flex;
            justify-content: center;
        }


        #profile-container .default-tab .e-content .e-item {
            padding: 10px;
            text-align: center;
        }

        #profile-container .profile-container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            padding: 0;
            margin: 0;
        }

        #profile-container .name-container {
            text-align: center;
        }


    #profile-tabs .e-toolbar {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 10px;
    }

    #parent {
        display: grid;
        grid-template-rows: auto auto;
        gap: 0px 0px;
    }

    #div1 {
        display: flex;
    }

    #div2 {
    }

    #div3 {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    #div4 {
        position: absolute;
        color: white;
        left: 100%;
        transform: translate(-50px, 40px);
    }

    .name-container {
        display: flex;
        justify-items: center;
        flex-direction: column;
        align-items: center;
    }

    .e-tab .e-content > .e-item.e-active {
        background: inherit;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap {
        color: black;
    }

    #categories {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: center;
        margin: 25px;
        gap: 25px;
    }

    #location {
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 25px;
        gap: 25px;
    }

    #description {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 25px;
        gap: 25px;
    }

    #categories .category-sub {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    #location-sub {
        display: flex;
        flex-direction: row;
    }

        #location-sub div {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            margin: 10px;
            gap: 10px;
        }

</style>


