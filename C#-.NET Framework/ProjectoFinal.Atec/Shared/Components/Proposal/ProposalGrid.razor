@using Microsoft.EntityFrameworkCore
@using ProjetoFinal.Migrations
@using ProjetoFinal.Models.Notification
@using ProjetoFinal.Models.Service
@using ProjetoFinal.Models.Postal
@using ProjetoFinal.Models.Provider
@using ProjetoFinal.Web.Blazor.Data
@using ProjetoFinal.Web.Blazor.Services
@using ProjetoFinal.Web.Blazor.Shared.Components
@using ProjetoFinal.Web.Blazor.Shared.Components.Proposal
@using ProjetoFinal.Web.Blazor.Shared.Components.MainContainer
@using ProjetoFinal.Web.Blazor.Shared.Components.Publication
@using ProjetoFinal.Models.Message
@using System.Security.Claims

@inject NavigationManager navigationManager
@inject IAuthorizationService AuthorizationService
@inject HttpUtilities httpUtilities
@inject SyncfusionDatabaseUtilities syncfusionUtilities
@inject IDbContextFactory<PfaDbContext> DbFactory
@inject NotificationService notificationService
@inject IJSRuntime JsRuntime

<div>
    <SfTab @ref="Tab" @bind-SelectedItem="SelectedTab">
        <TabEvents Selected="Selected" />
        <TabItems>
            @{
                String[] tabHeaders = { "Todas", "Ativas", "Pendentes", "Realizadas", "Rejeitadas" };
            }
            @foreach (String tabHeader in tabHeaders)
            {
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@tabHeader" />
                    </ChildContent>
                </TabItem>
            }
        </TabItems>
    </SfTab>
    <SfGrid @ref="@Grid" DataSource="@gridData" TValue="ProposalIds" AllowFiltering="true" AllowSorting="true" AllowPaging="true" class="NMS-datatable" RowRenderingMode="@rowRenderingMode" EnableAdaptiveUI="true">
        <GridEvents OnLoad="@LoadHandler" OnActionFailure="ActionFailureHandler" DataBound="DataBoundHandler" TValue="ProposalIds"></GridEvents>
        <GridPageSettings PageSizes="true" PageSize="25" />
        <GridColumns>
            <GridColumn HeaderText="Nome" Field=@nameof(ProposalIds.ClientName)></GridColumn>
            <GridColumn HeaderText="Data" Field=@nameof(ProposalIds.ServiceDateStart)>
                <Template>
                    @{
                        var proposalIds = (context as ProposalIds);
                        string placeholder = "Sem data definida";
                        if (proposalIds.ServiceDateStart.HasValue)
                            @proposalIds.ServiceDateStart.Value.ToShortDateString()
                        else
                            @placeholder
                    }
                </Template>
            </GridColumn>
            <GridForeignColumn ForeignDataSource="@categoriesList"
                                TValue="Category"
                                Field=@nameof(ProposalIds.CategoryId)
                                HeaderText="Categoria"
                                ForeignKeyField="Id" ForeignKeyValue="Name"
                               FilterSettings="@(new FilterSettings{  })" />
            @if (isClient){
                <GridColumn HeaderText="Título" TextAlign="TextAlign.Left" Field=@nameof(ProposalIds.PublicationTitle)></GridColumn>
            }
            else{
                <GridForeignColumn ForeignDataSource="@districtsList"
                                   TValue="District"
                                   Field=@nameof(ProposalIds.DistrictId)
                                   HeaderText="Distrito"
                                   ForeignKeyField="Id" ForeignKeyValue="Name"
                                   FilterSettings="@(new FilterSettings{ Operator = Operator.Contains })" />
            }
            <GridForeignColumn ForeignDataSource="@countiesList"
                                TValue="County"
                                Field=@nameof(ProposalIds.CountyId)
                                HeaderText="Concelho"
                                ForeignKeyField="Id" ForeignKeyValue="Name" />
            <GridColumn HeaderText="Estado" TextAlign="TextAlign.Center" Width="100px">
                <Template>
                    @{
                        var proposalIds = (context as ProposalIds);
                        var status = getStatus(proposalIds.Proposal);
                            <div class="proposal-status-container">
                                <div class="proposal-status proposal-status-color-@status"></div>
                            </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
        <GridTemplates>
            <DetailTemplate>
                @{
                    var proposalIds = (context as ProposalIds);
                }
                <div class="NMS-datatable-detail-container">
                    <div class="NMS-datatable-detail-text">
                        <span class="NMS-datatable-detail-title">Descrição</span>
                        <span>@proposalIds.Proposal.Content</span>
                    </div>
                    <div class="NMS-datatable-detail-text">
                        <span class="NMS-datatable-detail-title">Valor</span>
                        <span>@proposalIds.Proposal.Price €</span>
                    </div>
                    <div class="NMS-datatable-detail-text">
                        <span class="NMS-datatable-detail-title">Duração</span>
                        <span>@(
                                (proposalIds.Proposal.Publication.ServiceDateStart.HasValue)
                                ? GetEventDurationString(proposalIds.Proposal.Publication.ServiceDateStart, proposalIds.Proposal.Publication.ServiceDateEnd)
                                : "N/A"
                        )
                        </span>
                    </div>
                    <AuthorizeView Policy="isProvider">
                        <Authorized Context="detailButtonsProvider">
                            <div class="NMS-datatable-detail-buttons">
                                @if (getStatus(proposalIds.Proposal) == 2) //pending
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejectProposal(proposalIds.Proposal.Id)">Cancelar</button>
                                }
                                <button class="btn btn-secondary btn-sm" 
                                    @onclick="() => OpenChat(proposalIds.Proposal.Publication.ClientUserId)"
                                >Contactar cliente</button>
                                <button class="btn btn-outline-secondary btn-sm" 
                                    @onclick="() => ToggleVisibilityPublicationPopup(proposalIds.Publication)"
                                >Ver publicação</button>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="isClient">
                        <Authorized Context="detailButtonsClient">
                            <div class="NMS-datatable-detail-buttons">
                                @if (getStatus(proposalIds.Proposal) == 2)
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => ProposalAcceptConfirmation(proposalIds.Proposal.Id)">Aceitar</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejectProposal(proposalIds.Proposal.Id)">Rejeitar</button>
                                }
                                @if (getStatus(proposalIds.Proposal) == 1) //active/accepted
                                {
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => CloseProposal(proposalIds.Proposal.Id)">Marcar como realizada</button>
                                }
                                @if (getStatus(proposalIds.Proposal) == 3) //isDone
                                {
                                    var ratings1 = ratings.Where(x => x.PublicationId == proposalIds.PublicationId).ToList();
                                    bool hasRatings = (ratings1.Count > 0);
                                    if (!hasRatings)
                                    {
                                        <button class="btn btn-sm btn-outline-success" @onclick="() => Rate(proposalIds)">Avaliar experiência</button>
                                    }
                                    else{
                                        <button class="btn btn-sm btn-outline-secondary" style="cursor:not-allowed"> Experiência já avaliada</button>
                                    }
                                }
                                <button class="btn btn-secondary btn-sm" @onclick="() => OpenChat(proposalIds.Proposal.ProviderUserId)">Contactar fornecedor</button>
                                <button class="btn btn-outline-secondary btn-sm" 
                                    @onclick="() => ToggleVisibilityPublicationPopup(proposalIds.Publication)">Ver publicação</button>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </DetailTemplate>
        </GridTemplates>
    </SfGrid>
    <ShowPublicationPopup 
        @bind-IsVisible="@IsVisiblePublicationPopup" 
        @bind-IsVisible:event="IsVisibleChanged"
        Publication="@PublicationForPopup"
    />
    <Modal @bind-IsVisible="@IsVisibleAcceptProposal" PreventExitOnOutsideClick="true">
        <div class="login-popup-container">
            <span>Prentende aceitar a proposta?</span>
            <span>Se o fizer, todas as outras propostas pendentes para a mesma publicação serão rejeitadas!</span>
            <button class="btn btn-outline-success" @onclick="AcceptProposal">Aceitar proposta</button>
            <button class="btn btn-outline-secondary" @onclick="ProposalAcceptConfirmationDenied">Voltar</button>
        </div>
    </Modal>
    @if (IsVisibleError)
    {
        <ErrorPopup errorList="errorList" @bind-IsVisible="@IsVisibleError" @bind-IsVisible:event="IsVisibleChanged"></ErrorPopup>
    }
    @if (IsVisibleSuccess)
    {
        <SuccessPopup Message="Proposta enviada!" @bind-IsVisible="@IsVisibleSuccess" @bind-IsVisible:event="IsVisibleChanged"></SuccessPopup>
    }
    @if (IsVisibleLocker)
    {
        <LockUI IsVisible="@IsVisibleLocker" />
    }
    @if (IsVisibleRating)
    {
        <ProjetoFinal.Web.Blazor.Shared.Components.Rating.FormRatingPopup @bind-IsVisible="@IsVisibleRating" @bind-IsVisible:event="IsVisibleChanged" ProposalData="@proposalToRate" />
    }
</div>

@code {

    private RowDirection rowRenderingMode = RowDirection.Horizontal;

    public async Task LoadHandler(object args)
    {
        if (await JsRuntime.InvokeAsync<bool>("isMobile"))
            rowRenderingMode = RowDirection.Vertical;
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private HttpClient mainHttpClient = null!;
    private PfaDbContext dbContext = default!;
    private IQueryable<Publication> publications = default!;
    private IQueryable<County> counties = default!;
    private IQueryable<District> districts = default!;
    private IQueryable<Category> categories = default!;
    private IQueryable<Proposal> proposals = default!;
    private IQueryable<Participant> participants = default!;
    private IQueryable<Rating> ratings = default!;
    private IQueryable<Proposal> filteredProposals = default!;
    private List<County> countiesList = default!;
    private List<District> districtsList = default!;
    private List<Category> categoriesList = default!;
    private List<ProposalIds> gridData = new();
    SfGrid<ProposalIds>? Grid { get; set; }
    private bool isClient { get; set; }
    private string loggedUserId { get; set; }

    private bool isLoggedIn { get; set; }

    // Grid properties
    private bool allowManage = false;

    SfTab? Tab;

    private int _selectedTab { get; set; }
    private int SelectedTab { get; set; } //int
    private bool isClosedQuery { get; set; } = false;
    private bool isAcceptedQuery { get; set; } = false;
    private bool isDoneQuery { get; set; } = false;

    //Publication popup
    //private bool _isVisiblePublicationPopup { get; set; } = false;
    private bool IsVisiblePublicationPopup { get; set; } = false;
    private Publication PublicationForPopup { get; set; } = null;

    private void ToggleVisibilityPublicationPopup(Publication p)
    {
        PublicationForPopup = p;
        IsVisiblePublicationPopup = !IsVisiblePublicationPopup;
    }

    //UI Locker popup
    private bool IsVisibleLocker { get; set; } = false;
    private void ToggleVisibilityLocker()
    {
        IsVisibleLocker = !IsVisibleLocker;
    }

    //rating popup
    private bool IsVisibleRating { get; set; } = false;
    private void ToggleVisibilityRating()
    {
        IsVisibleRating = !IsVisibleRating;
        if (IsVisibleRating == false) proposalToRate = null;
    }

    //Error popup modal control
    private List<string> errorList = new();
    public bool IsVisibleError { get; set; } = false;
    private void ToggleVisibilityError()
    {
        IsVisibleError = !IsVisibleError;
    }
    private void addErrorToList(string errorMessage)
    {
        errorList.Add(errorMessage);
    }

    //Success popup modal control
    public bool IsVisibleSuccess { get; set; } = false;
    private void ToggleVisibilitySuccess()
    {
        IsVisibleSuccess = !IsVisibleSuccess;
    }

    protected override async Task OnInitializedAsync()
    {
        // Initialise context
        dbContext = await DbFactory.CreateDbContextAsync();
        publications = dbContext.Publications.AsNoTracking().Include(x => x.County).ThenInclude(x => x.District);
        counties = dbContext.Counties.AsNoTracking();
        districts = dbContext.Districts.AsNoTracking();
        categories = dbContext.Categories.AsNoTracking();
        proposals = dbContext.Proposals.AsNoTracking();
        participants = dbContext.Participants.AsNoTracking();
        ratings = dbContext.Ratings.AsNoTracking();

        countiesList = counties.ToList();
        districtsList = districts.ToList();
        categoriesList = categories.ToList();

        // Create HttpClient
        mainHttpClient = httpUtilities.CreateUserClient("Main");

        //Check if client or provider

        isClient = (await AuthorizationService.AuthorizeAsync((await authenticationStateTask).User, "isClient")).Succeeded;

        loggedUserId = (await authenticationStateTask).User.FindFirstValue("sub");

        await proposalOrderBy();
    }

    private async Task<bool> proposalOrderBy(){
        if(isClient){
            if (SelectedTab != 0)
                filteredProposals = proposals.Where(x => x.IsClosed == isClosedQuery && x.IsAccepted == isAcceptedQuery && x.IsDone == isDoneQuery)
                                            .Where(x => x.Publication.ClientUserId == loggedUserId)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.County)
                                            .ThenInclude(x => x.District)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.Category)
                                            .OrderByDescending(x => x.Publication.Id);
            else
                filteredProposals = proposals.Where(x => x.Publication.ClientUserId == loggedUserId)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.County)
                                            .ThenInclude(x => x.District)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.Category)
                                            .OrderByDescending(x => x.Publication.Id);
        }
        else{
            if (SelectedTab != 0)
                filteredProposals = proposals.Where(x => x.IsClosed == isClosedQuery && x.IsAccepted == isAcceptedQuery && x.IsDone == isDoneQuery)
                                            .Where(x => x.ProviderUserId == loggedUserId)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.County)
                                            .ThenInclude(x => x.District)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.Category)
                                            .OrderByDescending(x => x.Publication.Id);
            else
                filteredProposals = proposals.Where(x => x.ProviderUserId == loggedUserId)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.County)
                                            .ThenInclude(x => x.District)
                                            .Include(x => x.Publication)
                                            .ThenInclude(x => x.Category)
                                            .OrderByDescending(x => x.Publication.Id);
        }
        await buildGridData();
        return true;
    }

    private async Task<bool> buildGridData(){
        gridData = new();
        foreach (Proposal p in filteredProposals)
        {
            ProposalIds x = new(p);
            x.PublicationTitle = p.Publication.Title;
            if (isClient) 
                x.ClientName = FetchUserName(p.ProviderUserId.ToString());
            else 
                x.ClientName = FetchUserName(p.Publication.ClientUserId.ToString());
            gridData.Add(x);
        }
        return true;
    }

    private void Selected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        selectedTabQueryBuilder(SelectedTab);
        proposalOrderBy();
    }

    //Screen responsiveness, not being worked on at the moment
    RowDirection RenderingMode = RowDirection.Vertical;

    private int getStatus(Proposal p)
    {
        //1 aceite, 2 pendente, 3 realizada, 4 rejeitada
        if (p.IsDone) return 3;
        if (p.IsClosed)
        {
            if (p.IsAccepted) return 1;
            return 4;
        }
        return 2;
    }

    private void selectedTabQueryBuilder(int value){
        switch (value)
        {   
            case (1):
                {
                    isClosedQuery = true;
                    isAcceptedQuery = true;
                    isDoneQuery = false;
                    return;
                }
            case (2):
                {
                    isClosedQuery = false;
                    isAcceptedQuery = false;
                    isDoneQuery = false;
                    return;
                }
            case (3):
                {
                    isClosedQuery = true;
                    isAcceptedQuery = true;
                    isDoneQuery = true;
                    return;
                }
            case (4):
                {
                    isClosedQuery = true;
                    isAcceptedQuery = false;
                    isDoneQuery = false;
                    return;
                }
            default: return;
        }
    }

    private string GetEventDurationString(DateTime? start, DateTime? end){
        int days = (end.Value.Date - start.Value.Date).Days;
        if (days > 1) return days + " dias";
        else if (days > 0) return days + " dia";
        int horas = (end.Value - start.Value).Hours;
        if (horas > 1) return horas + " horas";
        return horas + " hora";
    }

    private string FetchUserName(string userId)
    {
        Task<string> userNameTask = mainHttpClient.GetFromJsonAsync<string>($"/users/{userId}/name");
        return userNameTask.Result.ToString();
    }

    int? SelectedProposalId { get; set; } = null;

    private async Task AcceptProposal()
    {
        ToggleVisibilityLocker();
        StateHasChanged();

        var response = await mainHttpClient.PostAsync($"/proposals/{SelectedProposalId}/accept?decision=true", null);
        if (response.IsSuccessStatusCode)
        {
            ProposalIds p = gridData.Find(x => x.ProposalId == SelectedProposalId);
            string userName = FetchUserName(p.Publication.ClientUserId.ToString());
            notificationService.SendAsync(new Notification(p.ProviderId, "ProposalAccepted", "Proposta aceite",
                $"{userName} aceitou a sua proposta.")
            );
            RefreshData();
            ToggleVisibleAcceptProposal();
        }
        else if ((int)response.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
        }
        else
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde");
            ToggleVisibilityError();
        }
        ToggleVisibilityLocker();
        StateHasChanged();
    }

    private ProposalIds proposalToRate { get; set; }
    private async Task Rate(ProposalIds p)
    {
        proposalToRate = p;
        ToggleVisibilityRating();
    }

    private void ProposalAcceptConfirmation(int proposalId)
    {
        SelectedProposalId = proposalId;
        ToggleVisibleAcceptProposal();
        StateHasChanged();
    }

    private void ProposalAcceptConfirmationDenied()
    {
        SelectedProposalId = null;
        ToggleVisibleAcceptProposal();
        StateHasChanged();
    }

    //accept proposal prompt control
    private bool IsVisibleAcceptProposal { get; set; } = false;

    private void ToggleVisibleAcceptProposal()
    {
        IsVisibleAcceptProposal = !IsVisibleAcceptProposal;
    }

    private async Task RejectProposal(int proposalId)
    {
        ToggleVisibilityLocker();
        StateHasChanged();
        errorList = new();
        var response = await mainHttpClient.PostAsync($"/proposals/{proposalId}/accept?decision=false", null);
        if (response.IsSuccessStatusCode)
        {
            ProposalIds p = gridData.Find(x => x.ProposalId == proposalId);
            string userName = FetchUserName(p.Publication.ClientUserId.ToString());
            notificationService.SendAsync(new Notification(p.ProviderId, "ProposalRejected", "Proposta rejeitada",
                $"{userName} declinou a sua proposta.")
            );
            RefreshData();
        }
        else if ((int)response.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
        }
        else
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde");
            ToggleVisibilityError();
        }
        ToggleVisibilityLocker();
        StateHasChanged();
    }

    private async Task CloseProposal(int proposalId)
    {
        ToggleVisibilityLocker();
        StateHasChanged();
        errorList = new();
        var response = await mainHttpClient.PostAsync($"/proposals/{proposalId}/done?decision=true", null);
        if (response.IsSuccessStatusCode)
        {
            ProposalIds p = gridData.Find(x => x.ProposalId == proposalId);
            string userName = FetchUserName(p.Publication.ClientUserId.ToString());
            notificationService.SendAsync(new Notification(p.ProviderId, "ProposalClosed", "Proposta encerrada",
                $"{userName} deu uma proposta como concluida.")
            );
            RefreshData();
        }
        else if ((int)response.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
        }
        else
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde");
            ToggleVisibilityError();
        }
        ToggleVisibilityLocker();
        StateHasChanged();
    }

    private void RefreshData(){
        proposalOrderBy();
        Grid.Refresh();
        StateHasChanged();
    }

    private async void OpenChat(string contactId)
    {
        errorList = new();

        List<Participant> loggedUserConversations = participants.Where(x => x.UserId == loggedUserId).ToList();
        List<Participant> otherUserConversations = participants.Where(x => x.UserId == contactId).ToList();
        Participant result = null;

        if (loggedUserConversations.Count > 0 && otherUserConversations.Count > 0)
        {
            try{
                foreach (Participant p in otherUserConversations)
                {
                    result = loggedUserConversations.Find(x => x.ConversationId == p.ConversationId);
                    if (result != null) break;
                }
            }catch{
                addErrorToList("Erro do servidor. Tente novamente mais tarde (Código A1)");
                ToggleVisibilityError();
                return;
            }
        }

        if (result == null)
        {
            //criar conversa
            var response1 = await mainHttpClient.PostAsync($"/messaging/conversations?title=wtv", null);
            if (response1.IsSuccessStatusCode)
            {
                ToggleVisibilitySuccess();
            }
            else if ((int)response1.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return;
            }
            else
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (Código R1)");
                ToggleVisibilityError();
                return;
            }
            Conversation newConv = await response1.Content.ReadFromJsonAsync<Conversation>();

            //adicionar utilizador 1
            var response2 = await mainHttpClient.PostAsync($"/messaging/conversations/{newConv.Id}/participants?userId={loggedUserId}", null);
            if (response2.IsSuccessStatusCode)
            {
                ToggleVisibilitySuccess();
            }
            else if ((int)response2.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return;
            }
            else
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (Código R2)");
                ToggleVisibilityError();
                return;
            }

            //adicionar utilizador 2
            var response3 = await mainHttpClient.PostAsync($"/messaging/conversations/{newConv.Id}/participants?userId={contactId}", null);
            if (response3.IsSuccessStatusCode)
            {
                ToggleVisibilitySuccess();
            }
            else if ((int)response3.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return;
            }
            else
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (Código R3)");
                ToggleVisibilityError();
                return;
            }
        }

        navigationManager.NavigateTo("/messages");
    }

    private void toggleDataGridOn(){
        isLoggedIn = true;
    }

    public void DataBoundHandler()
    {        
        //   
    }

    public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        // 
    }
}
