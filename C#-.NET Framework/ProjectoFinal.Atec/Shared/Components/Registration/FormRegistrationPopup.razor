@using ProjetoFinal.Models.Notification
@using ProjetoFinal.Models.Postal
@using ProjetoFinal.Models.Provider
@using ProjetoFinal.Models.Service
@using ProjetoFinal.Models.Config
@using ProjetoFinal.Web.Blazor.Data
@using ProjetoFinal.Web.Blazor.Services
@using ProjetoFinal.Web.Blazor.Shared
@using ProjetoFinal.Migrations
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.Text
@using System.Text.RegularExpressions
@using System.Net.Mail

@inject NavigationManager navigationManager
@inject IAuthorizationService AuthorizationService
@inject HttpUtilities httpUtilities
@inject SyncfusionDatabaseUtilities syncfusionUtilities
@inject IDbContextFactory<PfaDbContext> DbFactory
@inject NotificationService notificationService

<div>
    <Modal @bind-IsVisible="@IsVisible" @bind-IsVisible:event="IsVisibleChanged" HasStyledContainer="false" PreventExitOnOutsideClick="true">
        <div class="notification-window-container" id="client-registration-form">
            <div class="notification-header">
                @*Close button*@
                <span class="notification-close-btn e-icons e-close" @onclick="ToggleVisibility"></span>
                @*Title*@
                <h1 class="notification-title">Registar como @TitleString()</h1>
            </div>
            @*Content*@
            <div class="notification-window-content">
                <Form FormSubmitted="FormSubmitted">
                    <div class="form-field">
                        <label>E-mail:</label>
                        <input 
                            type="email" 
                            name="email" 
                            id="form-email" 
                            placeholder="exemplo@site.com"
                            required
                            @bind="FormEmail" />
                    </div>
                    <div class="form-field">
                        <label>Password:</label>
                        <input type="password"
                               name="password"
                               id="form-password"
                               required
                               @bind="FormPassword" />
                    </div>
                    <div class="form-field">
                        <label>Repetir password:</label>
                        <input type="password"
                               name="passwordVerif"
                               id="form-passwordVerif"
                               required
                               @bind="FormPasswordVerif" />
                    </div>
                    <div class="form-field">
                        <label>Nome:</label>
                        <input type="text"
                               name="name"
                               id="form-name"
                               placeholder="Primeiro e último nome"
                               required
                               @bind="FormName" />
                    </div>
                    @if(IsProvider == true){
                        <div class="form-field">
                            <label>Nome profissional:</label>
                            <input type="text"
                               name="namePro"
                               id="form-namePro"
                               placeholder="Nome da empresa ou similar"
                               required
                               @bind="FormCompanyName" />
                        </div>
                        <div class="form-field">
                            <label>Descrição:</label>
                            <textarea 
                                name="description" 
                                rows="5" 
                                placeholder="Descrição da sua atividade (Data de começo de atividade e experiência profissional, por exemplo)"
                                  @bind="FormDescription"></textarea>
                        </div>
                        <div class="form-field">
                            <label>Ligações:</label>
                            <SfMultiSelect Mode="@VisualMode.CheckBox"
                                            TValue="int[]"
                                            @bind-Value="@SelectedSocials"
                                            TItem="SocialNetwork"
                                            DataSource="@socials"
                                            Placeholder="Selecione as ligações que pretende partilhar"
                                            AllowFiltering="false"
                                            ShowSelectAll="false"
                                            EnableSelectionOrder="false"
                                            ShowDropDownIcon="true"
                                            FilterBarPlaceholder="Pesquisa"
                                            PopupHeight="350px">
                                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                            @if (SelectedSocials != null)
                            {
                                <div class="form-field-attach">
                                    @foreach (ProfileSocial social in RegistrationSocials)
                                    {
                                        @if (SelectedSocials.Contains(social.SocialNetworkId))
                                        {
                                                <label>@social.SocialNetwork.Name</label>
                                                <input placeholder="Link completo" @bind-value="@social.Url" />
                                        }
                                    }
                                </div>
                            }
                        </div>
                        <div class="form-field">
                            <label>Categorias:</label>
                            <SfMultiSelect Mode="@VisualMode.CheckBox"
                                            TValue="int[]"
                                            @bind-Value="@SelectedCategories"
                                            TItem="Category"
                                            DataSource="@Categories"
                                            Placeholder="Selecione as categorias a que pretende dispor serviços"
                                            AllowFiltering="false"
                                            ShowSelectAll="false"
                                            EnableSelectionOrder="false"
                                            ShowDropDownIcon="true"
                                            FilterBarPlaceholder="Pesquisa"
                                            PopupHeight="350px">
                                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                        <div class="form-field">
                            <label>Distritos:</label>
                            <SfMultiSelect Mode="@VisualMode.CheckBox"
                                            TValue="int[]"
                                            @bind-Value="@SelectedDistricts"
                                            TItem="District"
                                            DataSource="@Districts"
                                            Placeholder="Selecione os distritos nos quais pretende dispor serviços"
                                            AllowFiltering="true"
                                            ShowSelectAll="false"
                                            EnableSelectionOrder="false"
                                            ShowDropDownIcon="true"
                                            FilterBarPlaceholder="Pesquisa"
                                            PopupHeight="350px">
                                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>              
                        <div class="form-field">
                            <label>Concelhos:</label>
                            <SfMultiSelect Mode="@VisualMode.CheckBox"
                                            TValue="int[]"
                                            @bind-Value="@SelectedLocations"
                                            TItem="County"
                                            DataSource="@LocationsInDisctricts"
                                            Placeholder="Selecione os concelhos nos quais pretende dispor serviços"
                                            AllowFiltering="true"
                                            ShowSelectAll="false"
                                            EnableSelectionOrder="false"
                                            ShowDropDownIcon="true"
                                            FilterBarPlaceholder="Pesquisa"
                                            PopupHeight="350px"
                                            Readonly="@(LocationsInDisctricts.Count == 0)">
                                <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                    }
                </Form>
            </div>
        </div>
    </Modal>
    <ErrorPopup errorList="errorList" @bind-IsVisible="@IsVisibleError" @bind-IsVisible:event="IsVisibleChanged"></ErrorPopup>
    <SuccessPopup Message="Registo efetuado!" @bind-IsVisible="@IsVisibleSuccess" @bind-IsVisible:event="IsVisibleChanged"></SuccessPopup>
    <LockUI IsVisible="@IsVisibleLocker"></LockUI>
</div>
<style>
    #client-registration-form.notification-window-container{
        direction: initial;
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 20px;
        align-items: center;
        padding: 20px;
        width: 80vw;
        max-width: 800px;
        overflow:visible;
        height: max-content;
        max-height: max-content;
    }
    #client-registration-form .notification-header{
        width: 100%;
        position: relative;
    }
    #client-registration-form .notification-close-btn {
        position: absolute;
        left: calc(0% - 10px);
        top: calc(50% - 15px);
        font-size: 30px;
        cursor: pointer;
        color: white;
    }
    #client-registration-form .notification-title{
        color: white;
        text-align: center;
        margin: 0 0 0 0;
        width: 100%;
    }
    #client-registration-form .notification-window-content{
        overflow-y:scroll;
        height: max-content;
        max-height: max-content;
        display:flex;
        flex-direction:column;
        gap:10px;
        width: 100%;
        overflow: visible;
    }
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private HttpClient mainHttpClient = null!;
    private PfaDbContext dbContext = default!;

    [Parameter]
    public bool? IsProvider { get; set; }

    private bool _isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (_isVisible == value) return;
            _isVisible = value;
            IsVisibleChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private void ToggleVisibility()
    {
        IsVisible = !IsVisible;
    }

    private string TitleString(){
        return (IsProvider == true) ? "fornecedor" : "cliente";
    }

    //UI Locker popup
    private bool IsVisibleLocker { get; set; } = false;
    private void ToggleVisibilityLocker()
    {
        IsVisibleLocker = !IsVisibleLocker;
    }

    //Error popup modal control
    private List<string> errorList = new();
    public bool IsVisibleError { get; set; } = false;
    private void ToggleVisibilityError()
    {
        IsVisibleError = !IsVisibleError;
    }
    private void addErrorToList(string errorMessage)
    {
        errorList.Add(errorMessage);
    }

    //Success popup modal control

    private bool IsFormSubmitted { get; set; } = false;
    public bool _isVisibleSuccess { get; set; }
    public bool IsVisibleSuccess
    {
        get => _isVisibleSuccess;
        set
        {
            if (_isVisibleSuccess == value) return;
            if (!value) ToggleFormOnSuccess();
            _isVisibleSuccess = value;
        }
    }

    private void ToggleFormOnSuccess()
    {
        if (IsFormSubmitted) ToggleVisibility();
    }

    private void ToggleVisibilitySuccess()
    {
        IsVisibleSuccess = !IsVisibleSuccess;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        mainHttpClient = httpUtilities.CreateUserClient("Main");

        dbContext = await DbFactory.CreateDbContextAsync();
        socialNetworks = dbContext.SocialNetworks.AsNoTracking();
        counties = dbContext.Counties.AsNoTracking();
        districts = dbContext.Districts.AsNoTracking();
        categories = dbContext.Categories.AsNoTracking();
        getData();

        IsVisibleSuccess = false;
    }

    private IQueryable<SocialNetwork> socialNetworks = default!;
    private IQueryable<County> counties = default!;
    private IQueryable<District> districts = default!;
    private IQueryable<Category> categories = default!;

    private void getData(){
        GetSocials();
        GetCategories();
        GetCounties();
        GetDistricts();
    }

    //socials --
    private int[]? SelectedSocials { get; set; }
    private List<SocialNetwork> socials = new();

    private List<ProfileSocial> RegistrationSocials = new List<ProfileSocial>();

    private async Task GetSocials()
    {
        socials = socialNetworks.ToList();

        foreach (SocialNetwork social in socials)
        {
            ProfileSocial newProfileSocial = new ProfileSocial("", social.Id, "");
            newProfileSocial.SocialNetwork = social;
            RegistrationSocials.Add(newProfileSocial);
        }

        return;
    }

    //categories --
    private int[]? SelectedCategories { get; set; }
    List<Category> Categories = new();

    private async Task GetCategories()
    {
        Categories = categories.ToList();

        return;
    }

    //locations --
    //districts
    private int[]? _selectedDistricts { get; set; }
    private int[]? SelectedDistricts {
        get => _selectedDistricts;
        set
        {
            if (_selectedDistricts == value) return;
            if (value == null) SelectedLocations = null;
            _selectedDistricts = value;
            GetCountiesInDistricts();
        }
    }
    List<District> Districts = new();

    private async Task GetDistricts()
    {
        Districts = districts.ToList();

        return;
    }

    //counties
    private int[]? SelectedLocations { 
        get; 
        set; }
    List<County> Locations = new();
    List<County> LocationsInDisctricts = new();

    private async Task GetCounties()
    {
        Locations = counties.ToList();

        return;
    }

    private List<County> GetCountiesInDistricts()
    {
        if (SelectedDistricts == null || SelectedDistricts?.Length == 0) LocationsInDisctricts = new();
        else LocationsInDisctricts = Locations.FindAll(IsInDistricts);

        return LocationsInDisctricts;
    }

    private bool IsInDistricts(County county)
    {
        if (SelectedDistricts?.Contains(county.DistrictId) == true) return true;
        return false;
    }

    //form data
    [Parameter]
    public Publication publication { get; set; }

    private string FormName { get; set; }
    private string FormPassword { get; set; }
    private string FormPasswordVerif { get; set; }
    private string FormEmail { get; set; }

    private string FormCompanyName { get; set; }
    private string FormDescription { get; set; }

    private async void FormSubmitted()
    {
        ToggleVisibilityLocker();
        bool IsSuccessful = await submitUser();
        if (IsSuccessful) {
            IsFormSubmitted = true;
            ToggleVisibilitySuccess();
        }
        ToggleVisibilityLocker();
        StateHasChanged();
        return;
    }

    private async Task<bool> submitUser(){
        //validate user related fields
        errorList = new();
        if (!verifyName()) addErrorToList("Nome inválido. Insira o seu primeiro e último nome apenas!");
        if (FormPassword == null || FormPassword.Length == 0 || !verifyPasswordSecurity()) addErrorToList("Password inválida. Utilize letras maiúsculas e minúsculas, números e carateres especiais, com um mínimo de 8 carateres!");
        if (FormPasswordVerif == null || FormPasswordVerif.Length == 0 || !verifyPasswordsMatching()) addErrorToList("Passwords não são iguais!");
        if (!verifyEmail()) addErrorToList("E-mail inválido!");

        //validate provider field
        if (IsProvider == true)
        {
            if (!verifyCompanyName()) addErrorToList("Nome profissional inválido!");
            if (!verifyCategories()) addErrorToList("Selecione pelo menos uma categoria!");
            if (!verifyCounties()) addErrorToList("Selecione pelo menos um concelho!");
        }
        //if erros exist, cancel submit and shows errors
        if (HasErros())
        {
            ToggleVisibilityError();
            return false;
        }

        //create user
        string response = default!;
        string newUserId = default!;

        response = await createUser();
        if (response == "Error") return false;
        else newUserId = response;

        //if it's a client profile, registry is done
        //add isClient role @ /users/{userId}/roles
        if (IsProvider == false)
        {
            HttpResponseMessage responseClientRole = await mainHttpClient.PostAsync($"/users/{newUserId}/roles?roleName=Client", null);
            if ((int)responseClientRole.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return false;
            }
            else if ((int)responseClientRole.StatusCode > 400)
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (E1)");
                ToggleVisibilityError();
                return false;
            }

            notificationService.SendAsync(new Notification(newUserId, "NewClient", "Novo cliente",
                $"Benvindo à NoMoreSelfies! Aqui receberá atualizações referentes à sua conta.")
            );

            return true;
        }
        else
        {
            HttpResponseMessage responseProviderRole = await mainHttpClient.PostAsync($"/users/{newUserId}/roles?roleName=Provider", null);
            if ((int)responseProviderRole.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return false;
            }
            else if ((int)responseProviderRole.StatusCode > 400)
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (E1)");
                ToggleVisibilityError();
                return false;
            }
        }

        //instanciate classes and submit
        //Profile
        // /providers/profiles
        Profile newProfile = new(
            newUserId, FormCompanyName, FormDescription, ""
        );

        HttpResponseMessage responseProfile = await mainHttpClient.PostAsJsonAsync<Profile>($"/providers/profiles", newProfile);
        if ((int)responseProfile.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
            return false;
        }
        else if ((int)responseProfile.StatusCode > 400)
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde (E2)");
            ToggleVisibilityError();
            return false;
        }

        //Profile Socials
        // /providers/profiles/{profileId}/socialnetworks
        if(SelectedSocials != null && SelectedSocials.Length > 0){
            List<ProfileSocial> newProfileSocials = RegistrationSocials.FindAll(x => SelectedSocials.Contains(x.SocialNetworkId));

            foreach (ProfileSocial profileSocial in newProfileSocials)
            {
                HttpResponseMessage responseProfileSocials = await mainHttpClient.PostAsync($"/providers/profiles/{newUserId}/socialnetworks?socialNetworkId={profileSocial.SocialNetworkId}&url={profileSocial.Url}", null);
                if ((int)responseProfileSocials.StatusCode == 401)
                {
                    addErrorToList("Erro do servidor. Atualize a página");
                    ToggleVisibilityError();
                    return false;
                }
                else if ((int)responseProfileSocials.StatusCode > 400)
                {
                    addErrorToList("Erro do servidor. Tente novamente mais tarde (E3)");
                    ToggleVisibilityError();
                    return false;
                }
            }
        }

        //Categories
        // /providers/profiles/{profileId}/categories?categoryId=...

        foreach (int categoryId in SelectedCategories)
        {
            HttpResponseMessage responseCategory = await mainHttpClient.PostAsync($"/providers/profiles/{newUserId}/categories?categoryId={categoryId}", null);
            if ((int)responseCategory.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return false;
            }
            else if ((int)responseCategory.StatusCode > 400)
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (E4)");
                ToggleVisibilityError();
                return false;
            }
        }

        //Locatiuons (counties)
        // /providers/profiles/{profileId}/counties?categoryId=...

        foreach (int locationId in SelectedLocations)
        {
            HttpResponseMessage responseLocation = await mainHttpClient.PostAsync($"/providers/profiles/{newUserId}/counties?countyId={locationId}", null);
            if ((int)responseLocation.StatusCode == 401)
            {
                addErrorToList("Erro do servidor. Atualize a página");
                ToggleVisibilityError();
                return false;
            }
            else if ((int)responseLocation.StatusCode > 400)
            {
                addErrorToList("Erro do servidor. Tente novamente mais tarde (E5)");
                ToggleVisibilityError();
                return false;
            }
        }

        notificationService.SendAsync(new Notification(newUserId, "NewProvider", "Novo fornecedor",
            $"Benvindo à NoMoreSelfies! Aqui receberá atualizações referentes à sua conta.")
        );

        return true;
    }

    private bool HasErros(){
        return (errorList.Count > 0);
    }

    private async Task<string> createUser(){

        User newUser = new(FormEmail, FormPassword, FormName);

        HttpResponseMessage response = await mainHttpClient.PostAsJsonAsync<User>($"/users", newUser);
        if (response.IsSuccessStatusCode) return await response.Content.ReadFromJsonAsync<string>();
        else if ((int)response.StatusCode == 401)
        {
            addErrorToList("Erro do servidor. Atualize a página");
            ToggleVisibilityError();
        }
        else if ((int)response.StatusCode == 409)
        {
            addErrorToList("E-mail já se encontra registado!");
            ToggleVisibilityError();
        }
        else
        {
            addErrorToList("Erro do servidor. Tente novamente mais tarde (E5)");
            ToggleVisibilityError();
        }
        return "Error";
    }

    private bool verifyName()
    {
        if (FormName == null || FormName.Length == 0) return false;

        string escapedName = Regex.Replace(FormName, "([^0-9A-Za-záàâãéèêíïóôõöúçñ ])", "", RegexOptions.IgnoreCase);
        string[] names = escapedName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);

        if (names.Length != 2) return false;

        FormName = escapedName;
        return true;
    }

    private bool verifyEmail()
    {
        if (FormEmail == null || FormEmail.Length == 0) return false;

        string pattern = "^\\S+@\\S+\\.\\S+$";
        Regex rg = new Regex(pattern);
        return rg.IsMatch(FormEmail);

        ///
    }

    private bool verifyPasswordSecurity()
    {
        if (FormPassword == null || FormPassword.Length == 0) return false;

        string pattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$";
        Regex rg = new Regex(pattern);
        return rg.IsMatch(FormPassword);
    }

    private bool verifyPasswordsMatching()
    {
        return (FormPassword == FormPasswordVerif);
    }

    private bool verifyCompanyName()
    {
        if (FormCompanyName == null || FormCompanyName.Length == 0) return false;
        return true;
    }

    private bool verifySocials()
    {
        //
        return true;
    }

    private bool verifyCategories()
    {
        if (SelectedCategories == null || SelectedCategories.Length == 0) return false;
        return true;
    }

    private bool verifyCounties()
    {
        if (SelectedLocations == null || SelectedLocations.Length == 0) return false;
        return true;
    }
}
