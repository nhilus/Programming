@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpUtilities httpUtilities

@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor

@using ProjetoFinal.Migrations
@using ProjetoFinal.Models.Provider
@inject IDbContextFactory<PfaDbContext> DbFactory
@using Microsoft.EntityFrameworkCore

<div style="margin-top:30px;">
    <h1 style="text-align:center;margin-bottom:20px;">Testemunhos</h1>
    <div style="display:flex;flex-wrap:wrap;">
        @if (ratings != null){
            @foreach (Rating rating in ratings)
            {
                <ProjetoFinal.Web.Blazor.Shared.Components.ProfilePage.ReviewCard @bind-Valor="@rating.Rate" @bind-Comentario="rating.Description" />
            }
        }
    </div>
</div>

@code {
    private List<Rating> ratings = new();
    private PfaDbContext dbContext = default!;
    private IQueryable<Rating> dbRatings = default!;

    protected override async Task OnInitializedAsync(){

        dbContext = await DbFactory.CreateDbContextAsync();
        dbRatings = dbContext.Ratings.AsNoTracking();

        List<Rating> _ratings = dbRatings.Where(x => x.Rate >= 4).ToList();

        if (_ratings != null && _ratings.Count < 3) return;

        for (var i = 0; i < 3; i++)
        {
            Random rand = new();
            int idx = rand.Next(0, _ratings.Count);
            Rating r = _ratings[idx];
            ratings.Add(r);
            _ratings.RemoveAt(idx);
        }
    }
}
